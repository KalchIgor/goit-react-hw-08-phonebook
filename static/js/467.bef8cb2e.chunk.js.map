{"version":3,"file":"static/js/467.bef8cb2e.chunk.js","mappings":"yOAsFA,UA9EqB,WACnB,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBR,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MAEd,OAAQT,GACN,IAAK,WACHC,EAAQQ,GACR,MACF,IAAK,YACHN,EAASM,GACT,MACF,IAAK,eACHJ,EAAYI,GAIjB,EAEKC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFG,GAASC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACjCC,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCE,GAAaH,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OACE,kBAAMG,UAAWC,EAAAA,EAAAA,KAAYC,SAXV,SAAAf,GACnBA,EAAEgB,iBAEFb,GAASc,EAAAA,EAAAA,IAAa,CAAExB,KAAMA,EAAME,MAAOA,EAAOE,SAAUA,IAC7D,EAOC,WACE,kBAAOgB,UAAWC,EAAAA,EAAAA,MAAaI,QAASV,EAAxC,SAAgD,UAChD,kBACEW,GAAIX,EACJY,KAAK,OACL3B,KAAK,WACLS,MAAOT,EACP4B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,mBACZV,UAAWC,EAAAA,EAAAA,SAEb,kBAAOD,UAAWC,EAAAA,EAAAA,MAAaI,QAASP,EAAxC,SAAiD,WAGjD,kBACEQ,GAAIR,EACJS,KAAK,QACL3B,KAAK,YACLS,MAAOP,EACP0B,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,oBACZV,UAAWC,EAAAA,EAAAA,SAEb,kBAAOD,UAAWC,EAAAA,EAAAA,MAAaI,QAASN,EAAxC,SAAoD,cAGpD,kBACEO,GAAIP,EACJQ,KAAK,WACL3B,KAAK,eACLS,MAAOL,EACPwB,SAAUtB,EACVuB,UAAQ,EACRC,YAAY,uBACZV,UAAWC,EAAAA,EAAAA,QAEXT,GAA8E,SAAC,IAAD,KAAlE,mBAAQQ,UAAWC,EAAAA,EAAAA,OAAcM,KAAK,SAAtC,SAA+C,cAGlE,C,qBCpFD,KAAgB,KAAO,2BAA2B,OAAS,6B,wDCApD,IAkBIV,EAAS,eAACc,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/Application/RegisterForm/RegisterForm.js","webpack://react-homework-template/./src/components/Application/RegisterForm/RegisterForm.module.css?ab7e","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuthentication } from 'redux/authentication/authenticationSlice';\nimport { registerUser } from 'redux/authentication/authenticationOperation';\nimport { Loader } from '../Loader/Loader';\nimport style from './RegisterForm.module.css';\n\nconst RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userName':\n        setName(value);\n        break;\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      default:\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuthentication);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(registerUser({ name: name, email: email, password: password }));\n  };\n\n  const nameId = useMemo(() => nanoid(), []);\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <form className={style.form} onSubmit={handleSubmit}>\n      <label className={style.label} htmlFor={nameId}>Name</label>\n      <input\n        id={nameId}\n        type=\"text\"\n        name=\"userName\"\n        value={name}\n        onChange={handleChange}\n        required\n        placeholder=\"Choose your Name\"\n        className={style.input}\n      />\n      <label className={style.label} htmlFor={emailId}>\n        Email\n      </label>\n      <input\n        id={emailId}\n        type=\"email\"\n        name=\"userEmail\"\n        value={email}\n        onChange={handleChange}\n        required\n        placeholder=\"Choose your Email\"\n        className={style.input}\n      />\n      <label className={style.label} htmlFor={passwordId}>\n        Password\n      </label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"userPassword\"\n        value={password}\n        onChange={handleChange}\n        required\n        placeholder=\"Choose your Password\"\n        className={style.input}\n      />\n      {!isLoading ? <button className={style.button} type=\"submit\">Sign Up</button> : <Loader />}\n    </form>\n  );\n};\nexport default RegisterForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__OudSS\",\"button\":\"RegisterForm_button__NXJoX\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","name","setName","email","setEmail","password","setPassword","handleChange","e","target","value","dispatch","useDispatch","isLoading","useSelector","getAuthentication","nameId","useMemo","nanoid","emailId","passwordId","className","style","onSubmit","preventDefault","registerUser","htmlFor","id","type","onChange","required","placeholder","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}