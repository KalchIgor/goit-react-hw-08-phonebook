{"version":3,"file":"static/js/32.12aa5fe1.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Application/ContactForm/ContactForm.module.css?0294","components/Application/ContactForm/ContactForm.js","webpack://react-homework-template/./src/components/Application/ContactList/ContactList.module.css?0eb7","webpack://react-homework-template/./src/components/Application/ContactItem/ContactItem.module.css?732a","components/Application/ContactItem/ContactItem.js","components/Application/ContactList/ContactList.js","webpack://react-homework-template/./src/components/Application/Filter/Filter.module.css?53d4","components/Application/Filter/Filter.js","webpack://react-homework-template/./src/components/Application/Phonebook.module.css?c1f5","components/Application/Phonebook.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__pX6Wt\",\"label\":\"ContactForm_label__dqAXK\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { addContact } from 'redux/contacts/contactsOperation';\nimport { nanoid } from 'nanoid';\n\nimport { Loader } from '../Loader/Loader';\nimport { toast } from 'react-toastify';\n\nimport style from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { items, addingLoader } = useSelector(getContacts);\n\n  const contactAlreadyExists = (name, number) => {\n    return items.find(\n      item =>\n        item.name.toLocaleLowerCase() === name.toLocaleLowerCase() ||\n        item.number === number\n    );\n  };\n\n  const addContactToList = (id, name, number) => {\n    if (contactAlreadyExists(name, number)) {\n      return toast.error(`${name} ${number} is already in Phonebook`);\n    }\n\n    dispatch(addContact({ id, name, number }));\n    setName('');\n    setNumber('');\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n\n    addContactToList(nanoid(), name, number);\n  };\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  return (\n    <form onSubmit={onFormSubmit} className={style.form}>\n      <label htmlFor={nameId} className={style.label}>\n        Name\n      </label>\n      <input\n        id={nameId}\n        onChange={handleInputChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        className={style.input}\n        placeholder=\"Please enter name\"\n      />\n      <label htmlFor={numberId} className={style.label}>\n        Number\n      </label>\n      <input\n        id={numberId}\n        onChange={handleInputChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        className={style.input}\n        placeholder=\"Please enter telnumber\"\n      />\n      {addingLoader ? (\n        <Loader />\n      ) : (\n        <button\n          type=\"submit\"\n          className={style.addButton}\n          disabled={number && name ? false : true}\n        >\n          Add contact\n        </button>\n      )}\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__cwWB8\"};","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactItem_contact__f9iqC\",\"deleteButton\":\"ContactItem_deleteButton__emLr1\",\"contactList\":\"ContactItem_contactList__Cf-8s\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperation';\nimport style from './ContactItem.module.css';\n\nconst ContactItem = ({ data }) => {\n  const dispatch = useDispatch();\n  const { id, name, number } = data;\n  const onDeleteClick = (e, id) => {\n    if (id === e.target.id) {\n      e.target.textContent = 'Deleting...';\n      e.target.setAttribute('disabled', 'true');\n    }\n    dispatch(deleteContact(id))\n  }\n\n  return (\n    <li className={style.contact}>\n      <p className={style.contactList}>{name}: {number}</p>\n      <button type='button' id={id} onClick={(e) => onDeleteClick(e, id)} className={style.deleteButton}>Delete</button>\n    </li>\n  );\n}\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n    data: PropTypes.objectOf(PropTypes.string.isRequired,),\n}","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperation'\nimport { getContacts } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport style from './ContactList.module.css';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { Loader } from '../Loader/Loader';\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    const {items, error, isLoading} = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n\n    const getFilteredContacts = () => {\n        if (!filter) {\n            return items;\n        }\n        \n        return items.filter(({name}) => name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()))\n    }\n\n    const contactsToRender = getFilteredContacts()\n\n    return <ul className={style.list}>\n        {isLoading ? <div><Loader /></div> :\n        contactsToRender.map(item =>\n            <ContactItem key={item.id} data={item} />)}\n        {error && <div>Something went wrong, please, try again</div>}\n    </ul>\n}\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"inputFilter\":\"Filter_inputFilter__9oonZ\"};","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/filterSlice';\nimport styles from \"./Filter.module.css\"\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter);\n\n  const onFilterChange = e => {\n    dispatch(setFilter(e.currentTarget.value.toLowerCase()));\n  };\n\n    const filterId = nanoid();\n\n  return (\n    <label htmlFor={filterId}>\n      <input\n        id={filterId}\n        onChange={onFilterChange}\n        value={filterValue}\n        type=\"text\"\n        name=\"filter\"\n        className={styles.inputFilter}\n        placeholder=\"Find contacts by name\"\n      />\n    </label>\n  );\n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Phonebook_title__A-smG\",\"divContainer\":\"Phonebook_divContainer__SIbyN\"};","import ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport style from './Phonebook.module.css';\n\nconst Phonebook = () => {\n  return (\n    <div className={style.divContainer}>\n      <ContactForm />\n\n      <h2 className={style.title}>Find contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Phonebook;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["useState","name","setName","number","setNumber","handleInputChange","e","target","value","dispatch","useDispatch","useSelector","getContacts","items","addingLoader","addContactToList","id","find","item","toLocaleLowerCase","contactAlreadyExists","toast","addContact","nameId","nanoid","numberId","onSubmit","preventDefault","className","style","htmlFor","onChange","type","pattern","title","required","placeholder","Loader","disabled","data","onClick","textContent","setAttribute","deleteContact","onDeleteClick","useEffect","fetchContacts","error","isLoading","filter","getFilter","contactsToRender","includes","map","filterValue","state","filterId","setFilter","currentTarget","toLowerCase","styles","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}